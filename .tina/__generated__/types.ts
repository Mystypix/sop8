//@ts-nocheck
// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
import { gql } from 'tinacms';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  sys?: Maybe<SystemInfo>;
  id: Scalars['ID'];
  form: Scalars['JSON'];
  values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
};

export type Query = {
  __typename?: 'Query';
  getCollection: Collection;
  getCollections: Array<Collection>;
  node: Node;
  getDocument: DocumentNode;
  getDocumentList: DocumentConnection;
  getDocumentFields: Scalars['JSON'];
  getHomeDocument: HomeDocument;
  getHomeList: HomeConnection;
  getStructureDocument: StructureDocument;
  getStructureList: StructureConnection;
  getConductorsDocument: ConductorsDocument;
  getConductorsList: ConductorsConnection;
  getConcertsDocument: ConcertsDocument;
  getConcertsList: ConcertsConnection;
};


export type QueryGetCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryGetDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGetDocumentListArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
};


export type QueryGetHomeDocumentArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGetHomeListArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
};


export type QueryGetStructureDocumentArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGetStructureListArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
};


export type QueryGetConductorsDocumentArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGetConductorsListArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
};


export type QueryGetConcertsDocumentArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGetConcertsListArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
};

export type DocumentNode = HomeDocument | StructureDocument | ConductorsDocument | ConcertsDocument;

export type Home = {
  __typename?: 'Home';
  title?: Maybe<Scalars['String']>;
};

export type HomeDocument = Node & Document & {
  __typename?: 'HomeDocument';
  id: Scalars['ID'];
  sys: SystemInfo;
  data: Home;
  form: Scalars['JSON'];
  values: Scalars['JSON'];
  dataJSON: Scalars['JSON'];
};

export type HomeConnectionEdges = {
  __typename?: 'HomeConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<HomeDocument>;
};

export type HomeConnection = Connection & {
  __typename?: 'HomeConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<HomeConnectionEdges>>>;
};

export type StructureFirst_Violins = {
  __typename?: 'StructureFirst_violins';
  players?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type StructureSecond_Violins = {
  __typename?: 'StructureSecond_violins';
  players?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type StructureViols = {
  __typename?: 'StructureViols';
  players?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type StructureVioloncellos = {
  __typename?: 'StructureVioloncellos';
  players?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type StructureBasses = {
  __typename?: 'StructureBasses';
  players?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type StructureFlutes = {
  __typename?: 'StructureFlutes';
  players?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type StructureOboes = {
  __typename?: 'StructureOboes';
  players?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type StructureClarinets = {
  __typename?: 'StructureClarinets';
  players?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type StructureBassoons = {
  __typename?: 'StructureBassoons';
  players?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type StructureFrench_Horns = {
  __typename?: 'StructureFrench_horns';
  players?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type StructureTrumpets = {
  __typename?: 'StructureTrumpets';
  players?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type StructureTrombones = {
  __typename?: 'StructureTrombones';
  players?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type StructureTube = {
  __typename?: 'StructureTube';
  players?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type StructureDrums = {
  __typename?: 'StructureDrums';
  players?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type Structure = {
  __typename?: 'Structure';
  first_violins?: Maybe<Array<Maybe<StructureFirst_Violins>>>;
  second_violins?: Maybe<Array<Maybe<StructureSecond_Violins>>>;
  viols?: Maybe<Array<Maybe<StructureViols>>>;
  violoncellos?: Maybe<Array<Maybe<StructureVioloncellos>>>;
  basses?: Maybe<Array<Maybe<StructureBasses>>>;
  flutes?: Maybe<Array<Maybe<StructureFlutes>>>;
  oboes?: Maybe<Array<Maybe<StructureOboes>>>;
  clarinets?: Maybe<Array<Maybe<StructureClarinets>>>;
  bassoons?: Maybe<Array<Maybe<StructureBassoons>>>;
  french_horns?: Maybe<Array<Maybe<StructureFrench_Horns>>>;
  trumpets?: Maybe<Array<Maybe<StructureTrumpets>>>;
  trombones?: Maybe<Array<Maybe<StructureTrombones>>>;
  tube?: Maybe<Array<Maybe<StructureTube>>>;
  drums?: Maybe<Array<Maybe<StructureDrums>>>;
};

export type StructureDocument = Node & Document & {
  __typename?: 'StructureDocument';
  id: Scalars['ID'];
  sys: SystemInfo;
  data: Structure;
  form: Scalars['JSON'];
  values: Scalars['JSON'];
  dataJSON: Scalars['JSON'];
};

export type StructureConnectionEdges = {
  __typename?: 'StructureConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<StructureDocument>;
};

export type StructureConnection = Connection & {
  __typename?: 'StructureConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<StructureConnectionEdges>>>;
};

export type ConductorsConductors = {
  __typename?: 'ConductorsConductors';
  photo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
};

export type Conductors = {
  __typename?: 'Conductors';
  conductors?: Maybe<Array<Maybe<ConductorsConductors>>>;
};

export type ConductorsDocument = Node & Document & {
  __typename?: 'ConductorsDocument';
  id: Scalars['ID'];
  sys: SystemInfo;
  data: Conductors;
  form: Scalars['JSON'];
  values: Scalars['JSON'];
  dataJSON: Scalars['JSON'];
};

export type ConductorsConnectionEdges = {
  __typename?: 'ConductorsConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<ConductorsDocument>;
};

export type ConductorsConnection = Connection & {
  __typename?: 'ConductorsConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<ConductorsConnectionEdges>>>;
};

export type ConcertsConcerts = {
  __typename?: 'ConcertsConcerts';
  name?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  conductor?: Maybe<Scalars['String']>;
  solists?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['JSON']>;
};

export type Concerts = {
  __typename?: 'Concerts';
  concerts?: Maybe<Array<Maybe<ConcertsConcerts>>>;
};

export type ConcertsDocument = Node & Document & {
  __typename?: 'ConcertsDocument';
  id: Scalars['ID'];
  sys: SystemInfo;
  data: Concerts;
  form: Scalars['JSON'];
  values: Scalars['JSON'];
  dataJSON: Scalars['JSON'];
};

export type ConcertsConnectionEdges = {
  __typename?: 'ConcertsConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<ConcertsDocument>;
};

export type ConcertsConnection = Connection & {
  __typename?: 'ConcertsConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<ConcertsConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  createDocument: DocumentNode;
  updateHomeDocument: HomeDocument;
  createHomeDocument: HomeDocument;
  updateStructureDocument: StructureDocument;
  createStructureDocument: StructureDocument;
  updateConductorsDocument: ConductorsDocument;
  createConductorsDocument: ConductorsDocument;
  updateConcertsDocument: ConcertsDocument;
  createConcertsDocument: ConcertsDocument;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdateHomeDocumentArgs = {
  relativePath: Scalars['String'];
  params: HomeMutation;
};


export type MutationCreateHomeDocumentArgs = {
  relativePath: Scalars['String'];
  params: HomeMutation;
};


export type MutationUpdateStructureDocumentArgs = {
  relativePath: Scalars['String'];
  params: StructureMutation;
};


export type MutationCreateStructureDocumentArgs = {
  relativePath: Scalars['String'];
  params: StructureMutation;
};


export type MutationUpdateConductorsDocumentArgs = {
  relativePath: Scalars['String'];
  params: ConductorsMutation;
};


export type MutationCreateConductorsDocumentArgs = {
  relativePath: Scalars['String'];
  params: ConductorsMutation;
};


export type MutationUpdateConcertsDocumentArgs = {
  relativePath: Scalars['String'];
  params: ConcertsMutation;
};


export type MutationCreateConcertsDocumentArgs = {
  relativePath: Scalars['String'];
  params: ConcertsMutation;
};

export type DocumentMutation = {
  home?: InputMaybe<HomeMutation>;
  structure?: InputMaybe<StructureMutation>;
  conductors?: InputMaybe<ConductorsMutation>;
  concerts?: InputMaybe<ConcertsMutation>;
};

export type HomeMutation = {
  title?: InputMaybe<Scalars['String']>;
};

export type StructureFirst_ViolinsMutation = {
  players?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type StructureSecond_ViolinsMutation = {
  players?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type StructureViolsMutation = {
  players?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type StructureVioloncellosMutation = {
  players?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type StructureBassesMutation = {
  players?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type StructureFlutesMutation = {
  players?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type StructureOboesMutation = {
  players?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type StructureClarinetsMutation = {
  players?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type StructureBassoonsMutation = {
  players?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type StructureFrench_HornsMutation = {
  players?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type StructureTrumpetsMutation = {
  players?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type StructureTrombonesMutation = {
  players?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type StructureTubeMutation = {
  players?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type StructureDrumsMutation = {
  players?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type StructureMutation = {
  first_violins?: InputMaybe<Array<InputMaybe<StructureFirst_ViolinsMutation>>>;
  second_violins?: InputMaybe<Array<InputMaybe<StructureSecond_ViolinsMutation>>>;
  viols?: InputMaybe<Array<InputMaybe<StructureViolsMutation>>>;
  violoncellos?: InputMaybe<Array<InputMaybe<StructureVioloncellosMutation>>>;
  basses?: InputMaybe<Array<InputMaybe<StructureBassesMutation>>>;
  flutes?: InputMaybe<Array<InputMaybe<StructureFlutesMutation>>>;
  oboes?: InputMaybe<Array<InputMaybe<StructureOboesMutation>>>;
  clarinets?: InputMaybe<Array<InputMaybe<StructureClarinetsMutation>>>;
  bassoons?: InputMaybe<Array<InputMaybe<StructureBassoonsMutation>>>;
  french_horns?: InputMaybe<Array<InputMaybe<StructureFrench_HornsMutation>>>;
  trumpets?: InputMaybe<Array<InputMaybe<StructureTrumpetsMutation>>>;
  trombones?: InputMaybe<Array<InputMaybe<StructureTrombonesMutation>>>;
  tube?: InputMaybe<Array<InputMaybe<StructureTubeMutation>>>;
  drums?: InputMaybe<Array<InputMaybe<StructureDrumsMutation>>>;
};

export type ConductorsConductorsMutation = {
  photo?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  text?: InputMaybe<Scalars['String']>;
};

export type ConductorsMutation = {
  conductors?: InputMaybe<Array<InputMaybe<ConductorsConductorsMutation>>>;
};

export type ConcertsConcertsMutation = {
  name?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['String']>;
  time?: InputMaybe<Scalars['String']>;
  address?: InputMaybe<Scalars['String']>;
  conductor?: InputMaybe<Scalars['String']>;
  solists?: InputMaybe<Scalars['String']>;
  price?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['JSON']>;
};

export type ConcertsMutation = {
  concerts?: InputMaybe<Array<InputMaybe<ConcertsConcertsMutation>>>;
};

export type HomePartsFragment = { __typename?: 'Home', title?: string | null };

export type StructurePartsFragment = { __typename?: 'Structure', first_violins?: Array<{ __typename: 'StructureFirst_violins', players?: Array<string | null> | null } | null> | null, second_violins?: Array<{ __typename: 'StructureSecond_violins', players?: Array<string | null> | null } | null> | null, viols?: Array<{ __typename: 'StructureViols', players?: Array<string | null> | null } | null> | null, violoncellos?: Array<{ __typename: 'StructureVioloncellos', players?: Array<string | null> | null } | null> | null, basses?: Array<{ __typename: 'StructureBasses', players?: Array<string | null> | null } | null> | null, flutes?: Array<{ __typename: 'StructureFlutes', players?: Array<string | null> | null } | null> | null, oboes?: Array<{ __typename: 'StructureOboes', players?: Array<string | null> | null } | null> | null, clarinets?: Array<{ __typename: 'StructureClarinets', players?: Array<string | null> | null } | null> | null, bassoons?: Array<{ __typename: 'StructureBassoons', players?: Array<string | null> | null } | null> | null, french_horns?: Array<{ __typename: 'StructureFrench_horns', players?: Array<string | null> | null } | null> | null, trumpets?: Array<{ __typename: 'StructureTrumpets', players?: Array<string | null> | null } | null> | null, trombones?: Array<{ __typename: 'StructureTrombones', players?: Array<string | null> | null } | null> | null, tube?: Array<{ __typename: 'StructureTube', players?: Array<string | null> | null } | null> | null, drums?: Array<{ __typename: 'StructureDrums', players?: Array<string | null> | null } | null> | null };

export type ConductorsPartsFragment = { __typename?: 'Conductors', conductors?: Array<{ __typename: 'ConductorsConductors', photo?: string | null, name?: string | null, text?: string | null } | null> | null };

export type ConcertsPartsFragment = { __typename?: 'Concerts', concerts?: Array<{ __typename: 'ConcertsConcerts', name?: string | null, date?: string | null, time?: string | null, address?: string | null, conductor?: string | null, solists?: string | null, price?: string | null, description?: any | null } | null> | null };

export type GetHomeDocumentQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GetHomeDocumentQuery = { __typename?: 'Query', getHomeDocument: { __typename?: 'HomeDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Home', title?: string | null } } };

export type GetHomeListQueryVariables = Exact<{ [key: string]: never; }>;


export type GetHomeListQuery = { __typename?: 'Query', getHomeList: { __typename?: 'HomeConnection', totalCount: number, edges?: Array<{ __typename?: 'HomeConnectionEdges', node?: { __typename?: 'HomeDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Home', title?: string | null } } | null } | null> | null } };

export type GetStructureDocumentQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GetStructureDocumentQuery = { __typename?: 'Query', getStructureDocument: { __typename?: 'StructureDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Structure', first_violins?: Array<{ __typename: 'StructureFirst_violins', players?: Array<string | null> | null } | null> | null, second_violins?: Array<{ __typename: 'StructureSecond_violins', players?: Array<string | null> | null } | null> | null, viols?: Array<{ __typename: 'StructureViols', players?: Array<string | null> | null } | null> | null, violoncellos?: Array<{ __typename: 'StructureVioloncellos', players?: Array<string | null> | null } | null> | null, basses?: Array<{ __typename: 'StructureBasses', players?: Array<string | null> | null } | null> | null, flutes?: Array<{ __typename: 'StructureFlutes', players?: Array<string | null> | null } | null> | null, oboes?: Array<{ __typename: 'StructureOboes', players?: Array<string | null> | null } | null> | null, clarinets?: Array<{ __typename: 'StructureClarinets', players?: Array<string | null> | null } | null> | null, bassoons?: Array<{ __typename: 'StructureBassoons', players?: Array<string | null> | null } | null> | null, french_horns?: Array<{ __typename: 'StructureFrench_horns', players?: Array<string | null> | null } | null> | null, trumpets?: Array<{ __typename: 'StructureTrumpets', players?: Array<string | null> | null } | null> | null, trombones?: Array<{ __typename: 'StructureTrombones', players?: Array<string | null> | null } | null> | null, tube?: Array<{ __typename: 'StructureTube', players?: Array<string | null> | null } | null> | null, drums?: Array<{ __typename: 'StructureDrums', players?: Array<string | null> | null } | null> | null } } };

export type GetStructureListQueryVariables = Exact<{ [key: string]: never; }>;


export type GetStructureListQuery = { __typename?: 'Query', getStructureList: { __typename?: 'StructureConnection', totalCount: number, edges?: Array<{ __typename?: 'StructureConnectionEdges', node?: { __typename?: 'StructureDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Structure', first_violins?: Array<{ __typename: 'StructureFirst_violins', players?: Array<string | null> | null } | null> | null, second_violins?: Array<{ __typename: 'StructureSecond_violins', players?: Array<string | null> | null } | null> | null, viols?: Array<{ __typename: 'StructureViols', players?: Array<string | null> | null } | null> | null, violoncellos?: Array<{ __typename: 'StructureVioloncellos', players?: Array<string | null> | null } | null> | null, basses?: Array<{ __typename: 'StructureBasses', players?: Array<string | null> | null } | null> | null, flutes?: Array<{ __typename: 'StructureFlutes', players?: Array<string | null> | null } | null> | null, oboes?: Array<{ __typename: 'StructureOboes', players?: Array<string | null> | null } | null> | null, clarinets?: Array<{ __typename: 'StructureClarinets', players?: Array<string | null> | null } | null> | null, bassoons?: Array<{ __typename: 'StructureBassoons', players?: Array<string | null> | null } | null> | null, french_horns?: Array<{ __typename: 'StructureFrench_horns', players?: Array<string | null> | null } | null> | null, trumpets?: Array<{ __typename: 'StructureTrumpets', players?: Array<string | null> | null } | null> | null, trombones?: Array<{ __typename: 'StructureTrombones', players?: Array<string | null> | null } | null> | null, tube?: Array<{ __typename: 'StructureTube', players?: Array<string | null> | null } | null> | null, drums?: Array<{ __typename: 'StructureDrums', players?: Array<string | null> | null } | null> | null } } | null } | null> | null } };

export type GetConductorsDocumentQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GetConductorsDocumentQuery = { __typename?: 'Query', getConductorsDocument: { __typename?: 'ConductorsDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Conductors', conductors?: Array<{ __typename: 'ConductorsConductors', photo?: string | null, name?: string | null, text?: string | null } | null> | null } } };

export type GetConductorsListQueryVariables = Exact<{ [key: string]: never; }>;


export type GetConductorsListQuery = { __typename?: 'Query', getConductorsList: { __typename?: 'ConductorsConnection', totalCount: number, edges?: Array<{ __typename?: 'ConductorsConnectionEdges', node?: { __typename?: 'ConductorsDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Conductors', conductors?: Array<{ __typename: 'ConductorsConductors', photo?: string | null, name?: string | null, text?: string | null } | null> | null } } | null } | null> | null } };

export type GetConcertsDocumentQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GetConcertsDocumentQuery = { __typename?: 'Query', getConcertsDocument: { __typename?: 'ConcertsDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Concerts', concerts?: Array<{ __typename: 'ConcertsConcerts', name?: string | null, date?: string | null, time?: string | null, address?: string | null, conductor?: string | null, solists?: string | null, price?: string | null, description?: any | null } | null> | null } } };

export type GetConcertsListQueryVariables = Exact<{ [key: string]: never; }>;


export type GetConcertsListQuery = { __typename?: 'Query', getConcertsList: { __typename?: 'ConcertsConnection', totalCount: number, edges?: Array<{ __typename?: 'ConcertsConnectionEdges', node?: { __typename?: 'ConcertsDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Concerts', concerts?: Array<{ __typename: 'ConcertsConcerts', name?: string | null, date?: string | null, time?: string | null, address?: string | null, conductor?: string | null, solists?: string | null, price?: string | null, description?: any | null } | null> | null } } | null } | null> | null } };

export const HomePartsFragmentDoc = gql`
    fragment HomeParts on Home {
  title
}
    `;
export const StructurePartsFragmentDoc = gql`
    fragment StructureParts on Structure {
  first_violins {
    __typename
    players
  }
  second_violins {
    __typename
    players
  }
  viols {
    __typename
    players
  }
  violoncellos {
    __typename
    players
  }
  basses {
    __typename
    players
  }
  flutes {
    __typename
    players
  }
  oboes {
    __typename
    players
  }
  clarinets {
    __typename
    players
  }
  bassoons {
    __typename
    players
  }
  french_horns {
    __typename
    players
  }
  trumpets {
    __typename
    players
  }
  trombones {
    __typename
    players
  }
  tube {
    __typename
    players
  }
  drums {
    __typename
    players
  }
}
    `;
export const ConductorsPartsFragmentDoc = gql`
    fragment ConductorsParts on Conductors {
  conductors {
    __typename
    photo
    name
    text
  }
}
    `;
export const ConcertsPartsFragmentDoc = gql`
    fragment ConcertsParts on Concerts {
  concerts {
    __typename
    name
    date
    time
    address
    conductor
    solists
    price
    description
  }
}
    `;
export const GetHomeDocumentDocument = gql`
    query getHomeDocument($relativePath: String!) {
  getHomeDocument(relativePath: $relativePath) {
    sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    data {
      ...HomeParts
    }
  }
}
    ${HomePartsFragmentDoc}`;
export const GetHomeListDocument = gql`
    query getHomeList {
  getHomeList {
    totalCount
    edges {
      node {
        id
        sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        data {
          ...HomeParts
        }
      }
    }
  }
}
    ${HomePartsFragmentDoc}`;
export const GetStructureDocumentDocument = gql`
    query getStructureDocument($relativePath: String!) {
  getStructureDocument(relativePath: $relativePath) {
    sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    data {
      ...StructureParts
    }
  }
}
    ${StructurePartsFragmentDoc}`;
export const GetStructureListDocument = gql`
    query getStructureList {
  getStructureList {
    totalCount
    edges {
      node {
        id
        sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        data {
          ...StructureParts
        }
      }
    }
  }
}
    ${StructurePartsFragmentDoc}`;
export const GetConductorsDocumentDocument = gql`
    query getConductorsDocument($relativePath: String!) {
  getConductorsDocument(relativePath: $relativePath) {
    sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    data {
      ...ConductorsParts
    }
  }
}
    ${ConductorsPartsFragmentDoc}`;
export const GetConductorsListDocument = gql`
    query getConductorsList {
  getConductorsList {
    totalCount
    edges {
      node {
        id
        sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        data {
          ...ConductorsParts
        }
      }
    }
  }
}
    ${ConductorsPartsFragmentDoc}`;
export const GetConcertsDocumentDocument = gql`
    query getConcertsDocument($relativePath: String!) {
  getConcertsDocument(relativePath: $relativePath) {
    sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    data {
      ...ConcertsParts
    }
  }
}
    ${ConcertsPartsFragmentDoc}`;
export const GetConcertsListDocument = gql`
    query getConcertsList {
  getConcertsList {
    totalCount
    edges {
      node {
        id
        sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        data {
          ...ConcertsParts
        }
      }
    }
  }
}
    ${ConcertsPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      getHomeDocument(variables: GetHomeDocumentQueryVariables, options?: C): Promise<{data: GetHomeDocumentQuery, variables: GetHomeDocumentQueryVariables, query: string}> {
        return requester<{data: GetHomeDocumentQuery, variables: GetHomeDocumentQueryVariables, query: string}, GetHomeDocumentQueryVariables>(GetHomeDocumentDocument, variables, options);
      },
    getHomeList(variables?: GetHomeListQueryVariables, options?: C): Promise<{data: GetHomeListQuery, variables: GetHomeListQueryVariables, query: string}> {
        return requester<{data: GetHomeListQuery, variables: GetHomeListQueryVariables, query: string}, GetHomeListQueryVariables>(GetHomeListDocument, variables, options);
      },
    getStructureDocument(variables: GetStructureDocumentQueryVariables, options?: C): Promise<{data: GetStructureDocumentQuery, variables: GetStructureDocumentQueryVariables, query: string}> {
        return requester<{data: GetStructureDocumentQuery, variables: GetStructureDocumentQueryVariables, query: string}, GetStructureDocumentQueryVariables>(GetStructureDocumentDocument, variables, options);
      },
    getStructureList(variables?: GetStructureListQueryVariables, options?: C): Promise<{data: GetStructureListQuery, variables: GetStructureListQueryVariables, query: string}> {
        return requester<{data: GetStructureListQuery, variables: GetStructureListQueryVariables, query: string}, GetStructureListQueryVariables>(GetStructureListDocument, variables, options);
      },
    getConductorsDocument(variables: GetConductorsDocumentQueryVariables, options?: C): Promise<{data: GetConductorsDocumentQuery, variables: GetConductorsDocumentQueryVariables, query: string}> {
        return requester<{data: GetConductorsDocumentQuery, variables: GetConductorsDocumentQueryVariables, query: string}, GetConductorsDocumentQueryVariables>(GetConductorsDocumentDocument, variables, options);
      },
    getConductorsList(variables?: GetConductorsListQueryVariables, options?: C): Promise<{data: GetConductorsListQuery, variables: GetConductorsListQueryVariables, query: string}> {
        return requester<{data: GetConductorsListQuery, variables: GetConductorsListQueryVariables, query: string}, GetConductorsListQueryVariables>(GetConductorsListDocument, variables, options);
      },
    getConcertsDocument(variables: GetConcertsDocumentQueryVariables, options?: C): Promise<{data: GetConcertsDocumentQuery, variables: GetConcertsDocumentQueryVariables, query: string}> {
        return requester<{data: GetConcertsDocumentQuery, variables: GetConcertsDocumentQueryVariables, query: string}, GetConcertsDocumentQueryVariables>(GetConcertsDocumentDocument, variables, options);
      },
    getConcertsList(variables?: GetConcertsListQueryVariables, options?: C): Promise<{data: GetConcertsListQuery, variables: GetConcertsListQueryVariables, query: string}> {
        return requester<{data: GetConcertsListQuery, variables: GetConcertsListQueryVariables, query: string}, GetConcertsListQueryVariables>(GetConcertsListDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { staticRequest } from 'tinacms'
const requester: (doc: any, vars?: any, options?: any) => Promise<any> = async (
  doc,
  vars,
  _options
) => {
  let data = {}
  try {
    data = await staticRequest({
      query: doc,
      variables: vars,
    })
  } catch (e) {
    // swallow errors related to document creation
    console.warn('Warning: There was an error when fetching data')
    console.warn(e)
  }

  return { data, query: doc, variables: vars || {} }
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = ()=>getSdk(requester)

