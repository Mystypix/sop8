# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
  getDocumentFields: JSON!
  getHomeDocument(relativePath: String): HomeDocument!
  getHomeList(before: String, after: String, first: Float, last: Float, sort: String): HomeConnection!
  getAboutDocument(relativePath: String): AboutDocument!
  getAboutList(before: String, after: String, first: Float, last: Float, sort: String): AboutConnection!
  getStructureDocument(relativePath: String): StructureDocument!
  getStructureList(before: String, after: String, first: Float, last: Float, sort: String): StructureConnection!
  getConductorsDocument(relativePath: String): ConductorsDocument!
  getConductorsList(before: String, after: String, first: Float, last: Float, sort: String): ConductorsConnection!
  getConcertDocument(relativePath: String): ConcertDocument!
  getConcertList(before: String, after: String, first: Float, last: Float, sort: String): ConcertConnection!
  getGalleryDocument(relativePath: String): GalleryDocument!
  getGalleryList(before: String, after: String, first: Float, last: Float, sort: String): GalleryConnection!
  getContactDocument(relativePath: String): ContactDocument!
  getContactList(before: String, after: String, first: Float, last: Float, sort: String): ContactConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = HomeDocument | AboutDocument | StructureDocument | ConductorsDocument | ConcertDocument | GalleryDocument | ContactDocument

type Home {
  title: String
}

type HomeDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Home!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type HomeConnectionEdges {
  cursor: String
  node: HomeDocument
}

type HomeConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [HomeConnectionEdges]
}

type About {
  description: JSON
}

type AboutDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: About!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type AboutConnectionEdges {
  cursor: String
  node: AboutDocument
}

type AboutConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [AboutConnectionEdges]
}

type StructureFirst_violins {
  name: String
  concert: Boolean
}

type StructureSecond_violins {
  name: String
}

type StructureViols {
  name: String
}

type StructureVioloncellos {
  name: String
}

type StructureBasses {
  name: String
}

type StructureFlutes {
  name: String
}

type StructureOboes {
  name: String
}

type StructureClarinets {
  name: String
}

type StructureBassoons {
  name: String
}

type StructureFrench_horns {
  name: String
}

type StructureTrumpets {
  name: String
}

type StructureTrombones {
  name: String
}

type StructureTube {
  name: String
}

type StructureDrums {
  name: String
}

type Structure {
  first_violins: [StructureFirst_violins]
  second_violins: [StructureSecond_violins]
  viols: [StructureViols]
  violoncellos: [StructureVioloncellos]
  basses: [StructureBasses]
  flutes: [StructureFlutes]
  oboes: [StructureOboes]
  clarinets: [StructureClarinets]
  bassoons: [StructureBassoons]
  french_horns: [StructureFrench_horns]
  trumpets: [StructureTrumpets]
  trombones: [StructureTrombones]
  tube: [StructureTube]
  drums: [StructureDrums]
}

type StructureDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Structure!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type StructureConnectionEdges {
  cursor: String
  node: StructureDocument
}

type StructureConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [StructureConnectionEdges]
}

type ConductorsConductors {
  photo: String
  name: String
  text: String
}

type Conductors {
  conductors: [ConductorsConductors]
}

type ConductorsDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Conductors!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type ConductorsConnectionEdges {
  cursor: String
  node: ConductorsDocument
}

type ConductorsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [ConductorsConnectionEdges]
}

type Concert {
  name: String
  date: String
  time: String
  address: String
  conductor: String
  solists: String
  price: String
  description: JSON
}

type ConcertDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Concert!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type ConcertConnectionEdges {
  cursor: String
  node: ConcertDocument
}

type ConcertConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [ConcertConnectionEdges]
}

type GallerySectionsItems {
  url: String
}

type GallerySections {
  name: String
  items: [GallerySectionsItems]
}

type Gallery {
  sections: [GallerySections]
}

type GalleryDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Gallery!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type GalleryConnectionEdges {
  cursor: String
  node: GalleryDocument
}

type GalleryConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [GalleryConnectionEdges]
}

type ContactLeadership {
  name: String
  phone: String
  email: String
}

type ContactPractice {
  text: String
  address: String
}

type Contact {
  email: String
  leadership: ContactLeadership
  practice: ContactPractice
}

type ContactDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Contact!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type ContactConnectionEdges {
  cursor: String
  node: ContactDocument
}

type ContactConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [ContactConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateHomeDocument(relativePath: String!, params: HomeMutation!): HomeDocument!
  createHomeDocument(relativePath: String!, params: HomeMutation!): HomeDocument!
  updateAboutDocument(relativePath: String!, params: AboutMutation!): AboutDocument!
  createAboutDocument(relativePath: String!, params: AboutMutation!): AboutDocument!
  updateStructureDocument(relativePath: String!, params: StructureMutation!): StructureDocument!
  createStructureDocument(relativePath: String!, params: StructureMutation!): StructureDocument!
  updateConductorsDocument(relativePath: String!, params: ConductorsMutation!): ConductorsDocument!
  createConductorsDocument(relativePath: String!, params: ConductorsMutation!): ConductorsDocument!
  updateConcertDocument(relativePath: String!, params: ConcertMutation!): ConcertDocument!
  createConcertDocument(relativePath: String!, params: ConcertMutation!): ConcertDocument!
  updateGalleryDocument(relativePath: String!, params: GalleryMutation!): GalleryDocument!
  createGalleryDocument(relativePath: String!, params: GalleryMutation!): GalleryDocument!
  updateContactDocument(relativePath: String!, params: ContactMutation!): ContactDocument!
  createContactDocument(relativePath: String!, params: ContactMutation!): ContactDocument!
}

input DocumentMutation {
  home: HomeMutation
  about: AboutMutation
  structure: StructureMutation
  conductors: ConductorsMutation
  concert: ConcertMutation
  gallery: GalleryMutation
  contact: ContactMutation
}

input HomeMutation {
  title: String
}

input AboutMutation {
  description: JSON
}

input StructureFirst_violinsMutation {
  name: String
  concert: Boolean
}

input StructureSecond_violinsMutation {
  name: String
}

input StructureViolsMutation {
  name: String
}

input StructureVioloncellosMutation {
  name: String
}

input StructureBassesMutation {
  name: String
}

input StructureFlutesMutation {
  name: String
}

input StructureOboesMutation {
  name: String
}

input StructureClarinetsMutation {
  name: String
}

input StructureBassoonsMutation {
  name: String
}

input StructureFrench_hornsMutation {
  name: String
}

input StructureTrumpetsMutation {
  name: String
}

input StructureTrombonesMutation {
  name: String
}

input StructureTubeMutation {
  name: String
}

input StructureDrumsMutation {
  name: String
}

input StructureMutation {
  first_violins: [StructureFirst_violinsMutation]
  second_violins: [StructureSecond_violinsMutation]
  viols: [StructureViolsMutation]
  violoncellos: [StructureVioloncellosMutation]
  basses: [StructureBassesMutation]
  flutes: [StructureFlutesMutation]
  oboes: [StructureOboesMutation]
  clarinets: [StructureClarinetsMutation]
  bassoons: [StructureBassoonsMutation]
  french_horns: [StructureFrench_hornsMutation]
  trumpets: [StructureTrumpetsMutation]
  trombones: [StructureTrombonesMutation]
  tube: [StructureTubeMutation]
  drums: [StructureDrumsMutation]
}

input ConductorsConductorsMutation {
  photo: String
  name: String
  text: String
}

input ConductorsMutation {
  conductors: [ConductorsConductorsMutation]
}

input ConcertMutation {
  name: String
  date: String
  time: String
  address: String
  conductor: String
  solists: String
  price: String
  description: JSON
}

input GallerySectionsItemsMutation {
  url: String
}

input GallerySectionsMutation {
  name: String
  items: [GallerySectionsItemsMutation]
}

input GalleryMutation {
  sections: [GallerySectionsMutation]
}

input ContactLeadershipMutation {
  name: String
  phone: String
  email: String
}

input ContactPracticeMutation {
  text: String
  address: String
}

input ContactMutation {
  email: String
  leadership: ContactLeadershipMutation
  practice: ContactPracticeMutation
}

schema {
  query: Query
  mutation: Mutation
}
  