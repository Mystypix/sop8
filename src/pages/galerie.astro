---
import Layout from "../layouts/Layout.astro";
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';

import Section from "../components/Section.astro";
const assets = await getCollection('assets');
const galleryDict = {};
assets.forEach(item => {
    const galleryName = item.id.split('/')[1];

    if (!galleryDict[galleryName]) {
        galleryDict[galleryName] = [];
    }

    galleryDict[galleryName].push(item.data.url);
});

const sections = Object.entries(galleryDict).map(([name, assets]) => ({
    name,
    assets
})).sort((a, b) => {
    const [dayA, monthA, yearA] = a.name.split('-')[0].trim().split('.').map(part => part.trim());
    const [dayB, monthB, yearB] = b.name.split('-')[0].trim().split('.').map(part => part.trim());
    return new Date(`${yearB}-${monthB}-${dayB}`).getTime() - new Date(`${yearA}-${monthA}-${dayA}`).getTime();
});

---
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/glightbox/dist/css/glightbox.min.css" />
<Layout title="SOP8 - Galerie">
    <Section title="Galerie">
        {sections.map(({ name, assets }: {name: string, assets: string[]}) => (
            <div class="section">
                <h2 class="sectionTitle">{ name }</h2>
                <div class="gallery">
                    {assets.map((asset) => (
                        <a class="glightbox" href={asset} data-title={name}>
                            <Image class="img" src={asset} alt={asset} width="240" height="200"  />
                        </a>
                    ))}
                </div>
                {assets.length > 4 && <div class="showMore">Zobrazit v√≠ce</div>}
            </div>
        ))}
    </Section>
</Layout>
<style>
    .section {
        + .section {
            margin-top: 60px;
        }
    }

    .sectionTitle {
        margin-bottom: 20px;
    }

    .gallery {
        position: relative;
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 4px;
        width: 100%;
        height: 200px;
        overflow: hidden;
        transition: height 0.25s linear;
    }

    .glightbox {
        display: block;
        width: 100%;
        height: 200px;
        overflow: hidden;
    }

    .img {
        display: block;
        width: 100%;
        height: 100%;
        object-fit: cover;
        transform: scale(1);
        transition: transform 0.3s linear;

        &:hover {
            transform: scale(1.05);
        }
    }

    .showMore {
        margin-top: 20px;
        display: flex;
        justify-content: center;
        align-items: center;
        color: var(--main-color);
        font-size: 18px;
        text-align: center;
        opacity: 1;
        transition: opacity 0.25s linear;
        cursor: pointer;

        &:hover {
            opacity: .6;
        }
    }

</style>
<script type="module">
    import 'https://cdn.jsdelivr.net/gh/mcstudios/glightbox/dist/js/glightbox.min.js';

    GLightbox({
        zoomable: false,
    })

    document.querySelectorAll('.showMore').forEach(button => {
        button.addEventListener('click', function() {
            const section = this.closest('.section');
            const gallery = section.querySelector('.gallery');
            const items = gallery.querySelectorAll('.glightbox');
            const columns = getComputedStyle(gallery).getPropertyValue('grid-template-columns').split(' ').length;


            // Calculate the number of rows needed
            const rows = Math.ceil(items.length / columns);

            // Update the height of the gallery
            gallery.classList.add('open');
            gallery.style.maxHeight = `${rows * 200 + (rows - 1) * 4}px`; // 200px height + 4px gap per row
        });
    });
</script>