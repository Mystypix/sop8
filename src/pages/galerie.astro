---
import Layout from "../layouts/Layout.astro";
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';

import Section from "../components/Section.astro";
const assets = await getCollection('assets');
const galleryDict = {};
assets.forEach(item => {
    const galleryName = item.id.split('/')[1];

    if (!galleryDict[galleryName]) {
        galleryDict[galleryName] = [];
    }

    galleryDict[galleryName].push(item.data.url);
});

const sections = Object.entries(galleryDict).map(([name, assets]) => ({
    name,
    assets
})).sort((a, b) => {
    const [dayA, monthA, yearA] = a.name.split('-')[0].trim().split('.').map(part => part.trim());
    const [dayB, monthB, yearB] = b.name.split('-')[0].trim().split('.').map(part => part.trim());
    return new Date(`${yearB}-${monthB}-${dayB}`).getTime() - new Date(`${yearA}-${monthA}-${dayA}`).getTime();
});

---
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/glightbox/dist/css/glightbox.min.css" />
<Layout title="SOP8 - Galerie">
    <Section title="Galerie">
        {sections.map(({ name, assets }: {name: string, assets: string[]}) => (
            <div class="section">
                <h2 class="sectionTitle">{ name }</h2>
                <div class="gallery">
                    {assets.map((asset, index) => (
                        <a class="glightbox" href={asset} data-title={name} style={`display: ${index >= 5 ? 'none' : 'block'}`}>
                            <Image 
                                class="img" 
                                src={asset} 
                                alt={name} 
                                width="240" 
                                height="200" 
                                loading={index < 5 ? "eager" : "lazy"}
                                decoding="async"
                                quality={80}
                            />
                        </a>
                    ))}
                </div>
                {assets.length > 5 && (
                    <div class="showMore">Zobrazit více</div>
                )}
            </div>
        ))}
    </Section>
</Layout>
<style>
    .section {
        + .section {
            margin-top: 60px;
        }
    }

    .sectionTitle {
        margin-bottom: 20px;
    }

    .gallery {
        position: relative;
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 4px;
        width: 100%;
        overflow: hidden;
        max-height: 200px;
        transition: max-height 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        will-change: max-height;
    }

    .gallery.expanded {
        max-height: none;
    }

    .glightbox {
        display: block;
        width: 100%;
        height: 200px;
        overflow: hidden;
        will-change: transform;
    }

    .img {
        display: block;
        width: 100%;
        height: 100%;
        object-fit: cover;
        transform: scale(1);
        transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        will-change: transform;

        &:hover {
            transform: scale(1.05);
        }
    }

    .showMore {
        margin-top: 20px;
        display: flex;
        justify-content: center;
        align-items: center;
        color: var(--main-color);
        font-size: 18px;
        text-align: center;
        opacity: 1;
        transition: opacity 0.25s ease;
        cursor: pointer;
        user-select: none;

        &:hover {
            opacity: .6;
        }
    }
</style>
<script>
    // Defer non-critical JavaScript
    document.addEventListener('DOMContentLoaded', () => {
        // Load GLightbox dynamically
        const script = document.createElement('script');
        script.src = 'https://cdn.jsdelivr.net/gh/mcstudios/glightbox/dist/js/glightbox.min.js';
        script.onload = () => {
            // @ts-ignore - GLightbox is loaded dynamically
            window.GLightbox({
                zoomable: false,
                touchNavigation: true,
                loop: true
            });
        };
        document.head.appendChild(script);

        // Initialize galleries after a small delay to ensure proper rendering
        setTimeout(() => {
            const sections = document.querySelectorAll('.section');
            sections.forEach(section => {
                const gallery = section.querySelector('.gallery') as HTMLElement;
                const items = gallery.querySelectorAll('.glightbox') as NodeListOf<HTMLElement>;
                const showMoreButton = section.querySelector('.showMore') as HTMLElement;

                if (showMoreButton) {
                    // Calculate and store initial heights
                    const collapsedHeight = 200;
                    let expandedHeight = 0;
                    let isExpanded = false;

                    // Set initial state
                    gallery.style.maxHeight = `${collapsedHeight}px`;
                    
                    // Hide items beyond first 5 and calculate expanded height
                    items.forEach((item, index) => {
                        if (index >= 5) {
                            item.style.display = 'none';
                        } else {
                            expandedHeight += item.offsetHeight;
                        }
                    });

                    let isAnimating = false;

                    showMoreButton.addEventListener('click', function(e) {
                        e.preventDefault();
                        e.stopPropagation();
                        
                        if (isAnimating) return;
                        isAnimating = true;

                        // Explicitly manage expanded state
                        isExpanded = !isExpanded;
                        if (isExpanded) {
                            gallery.classList.add('expanded');
                        } else {
                            gallery.classList.remove('expanded');
                        }
                        
                        if (isExpanded) {
                            // Show all items first
                            items.forEach(item => {
                                item.style.display = 'block';
                            });
                            
                            // Force a reflow
                            gallery.offsetHeight;
                            
                            // Then animate the height
                            requestAnimationFrame(() => {
                                // Recalculate full height after showing all items
                                const fullHeight = gallery.scrollHeight;
                                gallery.style.maxHeight = `${fullHeight}px`;
                                showMoreButton.textContent = 'Zobrazit méně';
                                isAnimating = false;
                            });
                        } else {
                            // Force a reflow
                            gallery.offsetHeight;
                            
                            // Animate height first
                            gallery.style.maxHeight = `${collapsedHeight}px`;
                            
                            // Then hide items after animation
                            setTimeout(() => {
                                items.forEach((item, index) => {
                                    if (index >= 5) {
                                        item.style.display = 'none';
                                    }
                                });
                                showMoreButton.textContent = 'Zobrazit více';
                                isAnimating = false;
                            }, 300); // Match the CSS transition duration
                        }
                    });
                }
            });
        }, 100); // Small delay to ensure proper rendering
    });
</script>